# Copyright (c) Files Community
# Licensed under the MIT License.

# Abstract:
#   This CI is executed when a new commit is created on the main branch or
#   on a PR whose head branch is the main branch.
#   However, the CI will not be executed if files not directly related to
#   source code maintenance are updated.

name: Files CI (AOT)

on:
  workflow_dispatch:

env:
  WORKING_DIR: ${{ github.workspace }} # Default: 'D:\a\Files\Files'
  SOLUTION_PATH: '${{ github.workspace }}\Files.slnx'
  PACKAGE_PROJECT_DIR: '${{ github.workspace }}\src\Files.App (Package)'
  PACKAGE_PROJECT_PATH: '${{ github.workspace }}\src\Files.App (Package)\Files.Package.wapproj'
  AUTOMATED_TESTS_ARCHITECTURE: 'x64'
  AUTOMATED_TESTS_CONFIGURATION: 'Release'
  AUTOMATED_TESTS_PROJECT_DIR: '${{ github.workspace }}\tests\Files.InteractionTests'
  AUTOMATED_TESTS_PROJECT_PATH: '${{ github.workspace }}\tests\Files.InteractionTests\Files.InteractionTests.csproj'
  AUTOMATED_TESTS_ASSEMBLY_DIR: '${{ github.workspace }}\artifacts\TestsAssembly'
  ARTIFACTS_STAGING_DIR:  '${{ github.workspace }}\artifacts'
  APPX_PACKAGE_DIR: '${{ github.workspace }}\artifacts\AppxPackages'
  APPX_SELFSIGNED_CERT_PATH: '${{ github.workspace }}\.github\workflows\FilesApp_SelfSigned.pfx'
  WINAPPDRIVER_EXE86_PATH: 'C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe'
  WINAPPDRIVER_EXE64_PATH: 'C:\Program Files\Windows Application Driver\WinAppDriver.exe'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
        platform: [x64, arm64]
    env:
      CONFIGURATION: ${{ matrix.configuration }}
      ARCHITECTURE: ${{ matrix.platform }}

    steps:

    - name: Checkout the repository
      uses: actions/checkout@v4
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Get Packages.props hash
      id: packages-props-hash
      shell: pwsh
      run: echo "hash=$(git log -1 --pretty=format:%H -- Directory.Packages.props)" >> $env:GITHUB_OUTPUT

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ steps.packages-props-hash.outputs.hash }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore Files
      shell: pwsh
      run: |
        msbuild $env:SOLUTION_PATH `
          -t:Restore `
          -p:Platform=$env:ARCHITECTURE `
          -p:Configuration=$env:CONFIGURATION `
          -p:PublishReadyToRun=true `
          -v:quiet

    - name: Create self signed cert as a pfx file
      run: ./.github/scripts/Generate-SelfCertPfx.ps1 -Destination "$env:APPX_SELFSIGNED_CERT_PATH"

    - name: Build & package Files
      run: |
        msbuild `
          $env:PACKAGE_PROJECT_PATH `
          -t:Build `
          -t:_GenerateAppxPackage `
          -p:Configuration=$env:CONFIGURATION `
          -p:Platform=$env:ARCHITECTURE `
          -p:AppxBundlePlatforms=$env:ARCHITECTURE `
          -p:AppxBundle=Always `
          -p:UapAppxPackageBuildMode=SideloadOnly `
          -p:AppxPackageDir=$env:APPX_PACKAGE_DIR `
          -p:AppxPackageSigningEnabled=true `
          -p:PackageCertificateKeyFile=$env:APPX_SELFSIGNED_CERT_PATH `
          -p:PackageCertificatePassword="" `
          -p:PackageCertificateThumbprint="" `
          -p:EnableAot=true `
          -v:quiet

    - name: Upload the packages to the Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 'Appx Packages (${{ env.CONFIGURATION }}, ${{ env.ARCHITECTURE }})'
        path: ${{ env.ARTIFACTS_STAGING_DIR }}
